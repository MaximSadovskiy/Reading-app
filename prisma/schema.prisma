// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id                    String                 @id @default(cuid())
    username              String
    email                 String                 @unique
    password              String
    role                  UserRole               @default(USER)
    emailVerified         DateTime?
    image                 String?
    favouriteGenres       String[]
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    // книги оцененные пользователем (1 time action)
    ratedBooks            Rating[]
    // книги добавленные пользователем в библиотеку
    libraryBooks          LibraryBook[]
    comments              Comment[]
    likes                 Like[]

    @@map("users")
}

model Book {
    id           Int           @id @default(autoincrement())
    title        String
    author       Author        @relation(fields: [authorId], references: [id])
    authorId     Int
    genres       String[]
    year         String
    description  String
    quotes       String[]
    rating       Float         @default(7.5)
    thumbnail    String
    picture      String?
    file         String
    ratingScores Rating[]
    libraryBooks LibraryBook[]
    comments     Comment[]
    likes        Like[]

    @@map("books")
}

// Rating Books by User
model Rating {
    userId      String
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    bookId      Int
    book        Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
    ratingScore Float

    @@id(name: "ratingId", [userId, bookId])
}

// Library Added Books by User
model LibraryBook {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    bookId Int
    book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

    @@id(name: "libraryBookId", [userId, bookId])
}

model Author {
    id      Int     @id @default(autoincrement())
    name    String
    books   Book[]
    picture String?

    @@map("authors")
}

// Comments & Likes
model Comment {
    id         String   @id @default(cuid())
    content    String
    author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String
    authorName String
    book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId     Int
    likes      Like[]
    likesCount Int      @default(0)
    createdAt  DateTime

    @@unique(name: "commentId", [authorId, bookId, createdAt])
}

model Like {
    author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    book      Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId    Int
    comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String

    @@id(name: "likeId", [authorId, bookId, commentId])
}

// Authentication
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

// Two-Factor authentication
model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
