@use 'functions' as *;
@use 'maps' as m;

// layouts
@mixin flex($justify: stretch, $align: stretch, $gap: 0, $dir: row, $wrap: nowrap) {
    display: flex;
    flex-direction: $dir;
    flex-wrap: $wrap;
    justify-content: $justify;
    align-items: $align;
    gap: $gap;
};

@mixin colFlex($align: stretch, $justify: stretch, $gap: 0, $wrap: nowrap) {
    display: flex;
    flex-direction: column;
    flex-wrap: $wrap;
    justify-content: $justify;
    align-items: $align;
    gap: $gap;
};


@mixin childFlex($grow: 1, $shrink: 1, $basis: auto) {
    flex: $grow $shrink $basis;
}

// transition
@mixin colorTransition($duration: 300ms) {
    transition: background-color $duration ease-in-out, color $duration ease-in-out, border-color $duration ease-in-out;
};

@mixin transition($prop, $duration: 150ms, $ease: ease-in-out) {
    transition: $prop $duration $ease;
};

@mixin svgTransition($duration: 150ms) {
    transition: fill $duration ease-in-out, stroke $duration ease-in-out, transform $duration ease-in-out;
};

@mixin colorTransformTransition($colorDur: 150ms, $transformDur: 150ms, $ease: ease-in-out) {
    transition: background-color $colorDur $ease, color $colorDur $ease, border-color $colorDur ease-in-out, transform $transformDur $ease;
}

@mixin multipleTransition($properties, $duration: 150ms, $ease: ease-in-out) {
    $transitions: ();
    @each $prop in $properties {
        $transitions: append($transitions, $prop $duration $ease, comma);
    }
    transition: $transitions;
}

// Delay on animated childs
@mixin animationDelayOnChildren($elementCountNumber: 3, $initDelayNumber: 1, $increasingOfDelayNumber: 0.5) {
    @for $i from 1 through $elementCountNumber {
        &:nth-child(#{$i}) {
            $animationDelay: $initDelayNumber + ($increasingOfDelayNumber * ($i - 1));
            $animationDelaySeconds: #{$animationDelay}s;
            animation-delay: $animationDelaySeconds;
        }
    }
}

// animations
@mixin animationSlideInBlur ($duration: 1s, $translateValueNumber: -400, $timingFunction: linear, $direction: X) {
    $translateValuePx: pxIntoUnit($translateValueNumber);

    opacity: 0;
    filter: blur(10px);
    @if ($direction == X) {
        animation: slideInWithBlurX $duration $timingFunction forwards;
    }
    @else {
        animation: slideInWithBlurY $duration $timingFunction forwards;
    }

    @keyframes slideInWithBlurX {
        from {
            opacity: 0;
            filter: blur(10px);
            transform: translateX($translateValuePx);
        }
        to {
            opacity: 1;
            filter: blur(0px);
            transform: translateX(0);
        }   
    }

    @keyframes slideInWithBlurY {
        from {
            opacity: 0;
            filter: blur(10px);
            transform: translateY($translateValuePx); 
        }
        to {
            opacity: 1;
            filter: blur(0px);
            transform: translateY(0); 
        }   
    }
}

@mixin animationTrippleFallFromTop ($duration: 1s, $initTranslateVal: -400, $timingFunction: linear) {
    $translateValuePx: pxIntoUnit($initTranslateVal);

    opacity: 0;
    filter: blur(10px);
    animation: fallFromTop $duration $timingFunction forwards;

    $secondUpPoint: calc($initTranslateVal * 0.3);
    $thirdUpPoint: calc($initTranslateVal * 0.15);
    $secondUpPointPx: pxIntoUnit($secondUpPoint);
    $thirdUpPointPx: pxIntoUnit($thirdUpPoint);

    @keyframes fallFromTop {
        0% {
            opacity: 0;
            transform: translateY($translateValuePx);
        }

        // visual
        20% {
            opacity: 1;
        }

        25% {
            transform: translateY(0);
        }

        // visual
        44% {
            filter: blur(7px);
        }

        50% {
            transform: translateY($secondUpPointPx);
        }
        68% {
            transform: translateY(0);
            filter: blur(3px);
        }
        85% {
            transform: translateY($thirdUpPointPx);
        }
        100% {
            opacity: 1;
            filter: blur(0);
            transform: translateY(0);
        }
    }
}

@mixin animationPianoBubbleUp ($duration: 1.25s, $bubbleUpValue: -100, $timingFunction: linear) {
    $bubbleUpValuePx: pxIntoUnit($bubbleUpValue);
    animation: pianoBubbleUp $duration $timingFunction forwards;

    @keyframes pianoBubbleUp {
        0% {
            transform: translateY(0);
        }
        38% {
            transform: translateY($bubbleUpValuePx);
        }
        100% {
            transform: translateY(0);
        }   
    }
}

// can be reversed
@mixin animationFadeOut ($duration: 1.25s, $timingFunction: linear, $direction: normal) {
    animation: fadeOut $duration $timingFunction forwards $direction;

    @keyframes fadeOut {
        from {
            opacity: 1;
            transform: scale(1);
        }
        to {
            opacity: 0;
            transform: scale(0);
        }
    }
}

@mixin animationAppear($duration: 1.25s, $timingFunction: linear) {

    animation: appear $duration $timingFunction forwards;
    opacity: 0;
    filter: blur(10px);

    @keyframes appear {
        from {
            opacity: 0;
            filter: blur(10px);
        }
        to {
            opacity: 1;
            filter: blur(0);
        }
    }
}

// Cancel / Success Btn hover states
@mixin successHoverBtn {
    background-color: var(--gen-btn-bg-success);
    color: var(--gen-btn-color-success);
    border-color: var(--gen-btn-border-success);
}

@mixin cancelHoverBtn {
    background-color: var(--gen-btn-bg-cancel);
    color: var(--gen-btn-color-cancel);
    border-color: var(--gen-btn-border-cancel);
}

// padding, margin
@mixin padding($inline: pxIntoUnit(15), $block: pxIntoUnit(15)) {
    padding-inline: $inline;
    padding-block: $block;
};

// borders
@mixin roundCorners($dir: top, $val: pxIntoUnit(15)) {
    border-#{$dir}-left-radius: $val;
    border-#{$dir}-right-radius: $val; 
};

// font, text
@mixin fontClamp($bottom, $prefer, $high) {
    font-family: var(--font-pt-variable);
    font-size: clamp(pxIntoUnit($bottom), #{$prefer}vh, pxIntoUnit($high));
    letter-spacing: 1.5px;
};

@mixin fontDefault($fontSize: 17, $weight: 500, $spacingWithPx: 1.5px) {
    font-family: var(--font-pt-variable);
    font-size: pxIntoUnit($fontSize);
    font-weight: $weight;
    letter-spacing: $spacingWithPx;
};

@mixin fontHeading($headingPower: 2, $weight: 600, $textAlign: center){
    font-size: map-get($map: m.$headingPowers, $key: $headingPower);
    letter-spacing: 1.5px;
    font-family: var(--font-pt-variable);
    font-weight: $weight;
    text-align: $textAlign;
};

@mixin fontMarc($size: 30, $spacing: 0) {
    font-family: var(--font-marckscript);
    font-size: pxIntoUnit($size);
    letter-spacing: #{$spacing}px;
};

// COMPONENTS
@mixin linkWithUnderline($fontWeight: 500, $underlineColor: var(--link-underline), $isScaleNeeded: true) {
    @include fontClamp(20, 2.3, 24);
    @include transition(transform);

    font-weight: $fontWeight;
    color: var(--link-color);
    position: relative;

    &:hover {
        @if ($isScaleNeeded) {
            transform: scale(1.1);
        }
        @else {

        }
    };

    &::before {
        @include transition(transform, 300ms); 

        content: '';
        display: block;
        height: pxIntoUnit(2);
        width: 100%;
        position: absolute;
        bottom: pxIntoUnit(-10);
        left: 0;
        background-color: $underlineColor;
        border-radius: pxIntoUnit(5);
        transform: scale(0);
    };

    &:hover::before {
        transform: scaleX(1);
    }
}


@mixin btnDefault {
    &:hover {
        transform: scale(1.1);
    };

    &:active {
        transform: scale(0.9);
    }
}


@mixin customScrollBar($thumbColor, $trackColor, $width: thin) {
    scrollbar-width: $width;
    scrollbar-color: $thumbColor $trackColor;
}

@mixin customListMarker ($leftDistance: 35, $widthNumber: 10, $heightNumber: 10, $bgColor: --main-listmarker-bg, $borderColor: --main-listmarker-border) {
    display: list-item;
    position: relative;

    // outer big circle
    $topOuterOffsetPx: calc(50% - pxIntoUnit($heightNumber / 2));
    &::before {

        content: '';
        display: block;
        width: pxIntoUnit($widthNumber);
        height: pxIntoUnit($heightNumber);
        border-radius: 50%;
        background-color: var(#{$bgColor});
        border: 2px solid var(#{$borderColor});

        position: absolute;
        left: -#{pxIntoUnit($leftDistance)};
        top: $topOuterOffsetPx;
    }
}

// Button
@mixin defaultBtn($justify: center, $align: center, $paddingInlineNum: 20, $paddingBlockNumber: 15) {
    @include flex($justify, $align, pxIntoUnit(12));
    @include padding(pxIntoUnit($paddingInlineNum), pxIntoUnit($paddingBlockNumber));
    @include colorTransformTransition();
    @include fontDefault(22, 600);

    cursor: pointer;
    border-radius: pxIntoUnit(18);
    background-color: var(--gen-btn-bg);
    color: var(--gen-btn-color);
    border: pxIntoUnit(3) solid var(--gen-btn-border);

    &:hover {
        background-color: var(--gen-btn-bg-hover);
        border-color: var(--gen-btn-border-hover);
        color: var(--gen-btn-color-hover);
        transform: scale(1.1);
    }

    &:active {
        transform: scale(0.9);
    }
} 

/* breakpont */
@mixin breakpointUp($minWidth) {
    @media (min-width: #{$minWidth}px) {
        @content;
    }
}

@mixin breakpointDown($maxWidth) {
    @media (max-width: #{$maxWidth}px) {
        @content;
    }
}